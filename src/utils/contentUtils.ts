
// This file contains utility functions for content generation

export interface GeneratedContent {
  title: string;
  content: string;
  keywords: string[];
  suggestions: string[];
}

// Example prompts for different content types
export const contentPrompts = {
  blog: [
    "Write a comprehensive blog post about {KEYWORD} that explains the concept, benefits, and practical applications.",
    "Create a list-style blog post titled 'Top 10 ways to leverage {KEYWORD} in your business'",
    "Write a problem-solution blog post addressing common challenges with {KEYWORD}"
  ],
  social: [
    "Create a short social media post about {KEYWORD} with an engaging hook",
    "Write a question-based social media post that encourages engagement about {KEYWORD}",
    "Create a data-driven social media post highlighting a surprising statistic about {KEYWORD}"
  ],
  video: [
    "Write a video script introduction about {KEYWORD} that hooks the viewer in the first 30 seconds",
    "Create a detailed video script explaining {KEYWORD} for beginners",
    "Write a video script for a case study showcasing {KEYWORD} in action"
  ],
  email: [
    "Write an email newsletter introduction about the latest trends in {KEYWORD}",
    "Create an email series outline for educating subscribers about {KEYWORD}",
    "Write a promotional email highlighting a service related to {KEYWORD}"
  ],
  infographic: [
    "Create an outline for an infographic about {KEYWORD} with 5-7 key points",
    "Write content for a statistical infographic showcasing important numbers related to {KEYWORD}",
    "Create a step-by-step process infographic content about implementing {KEYWORD}"
  ]
};

// Sample generated content - in a real application, this would come from an AI API
export const generateContentFromPrompt = (prompt: string, keyword: string): GeneratedContent => {
  // This is a placeholder for AI-generated content
  // In a real app, you would call an AI API here
  
  const title = `Generated Content about ${keyword}`;
  const content = `This is a placeholder for AI-generated content about ${keyword} based on the prompt: "${prompt}".
  
In a real application, this would be high-quality content generated by an AI model like GPT-4 or similar.

The content would be tailored to the specific content type and keyword, providing:
- Relevant information about ${keyword}
- Industry insights and trends
- Actionable advice for implementation
- Engaging hooks and calls to action

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;

  // Sample suggestions for content improvement
  const suggestions = [
    `Add more statistics about ${keyword}`,
    `Include a case study about a company successfully using ${keyword}`,
    `Add a section addressing common misconceptions about ${keyword}`,
    `Include more actionable tips for implementing ${keyword}`
  ];

  return {
    title,
    content,
    keywords: [keyword, ...keyword.split(' ')],
    suggestions
  };
};

// Function to store and retrieve email settings in localStorage
export const emailSettings = {
  save: (email: string, daysBeforeDue: number, weeklySummary: boolean = false) => {
    localStorage.setItem('contentCalendarEmail', email);
    localStorage.setItem('contentCalendarNotifyDays', daysBeforeDue.toString());
    localStorage.setItem('contentCalendarWeeklySummary', weeklySummary ? 'true' : 'false');
  },
  get: () => {
    return {
      email: localStorage.getItem('contentCalendarEmail') || '',
      daysBeforeDue: parseInt(localStorage.getItem('contentCalendarNotifyDays') || '1'),
      weeklySummary: localStorage.getItem('contentCalendarWeeklySummary') === 'true'
    };
  }
};

// Complete rewrite of saveContentPlan function to fix array saving issues
export const saveContentPlan = (contentPlan: any[]) => {
  // First, validate that we have an array
  if (!Array.isArray(contentPlan)) {
    console.error('Error: saveContentPlan received a non-array:', contentPlan);
    return false;
  }
  
  try {
    // Log the input to verify what we're receiving
    console.log('Saving content plan, received items:', contentPlan.length);
    
    // Debug: Log the first few items to check their structure
    if (contentPlan.length > 0) {
      console.log('First item:', JSON.stringify(contentPlan[0]));
      if (contentPlan.length > 1) {
        console.log('Second item:', JSON.stringify(contentPlan[1]));
      }
    }
    
    // Use JSON stringify and parse to create a completely disconnected deep copy
    const contentPlanString = JSON.stringify(contentPlan);
    console.log('Stringified plan length:', contentPlanString.length);
    
    // Verify the string is not just an empty array or null
    if (contentPlanString === '[]' && contentPlan.length > 0) {
      console.error('Error: Stringified content plan is empty array but original had items');
      return false;
    }
    
    if (!contentPlanString || contentPlanString === 'null') {
      console.error('Error: Failed to stringify content plan');
      return false;
    }
    
    // Use direct storage approach rather than re-parsing first
    try {
      window.localStorage.setItem('contentCalendarPlan', contentPlanString);
      console.log('Successfully wrote to localStorage with length:', contentPlanString.length);
    } catch (storageError) {
      console.error('Error writing to localStorage:', storageError);
      
      // Check if we've hit storage limits
      if (storageError instanceof DOMException && 
          (storageError.name === 'QuotaExceededError' || 
           storageError.name === 'NS_ERROR_DOM_QUOTA_REACHED')) {
        console.error('localStorage quota exceeded');
      }
      return false;
    }
    
    // Verify what was saved by reading it back immediately
    const savedContent = window.localStorage.getItem('contentCalendarPlan');
    if (!savedContent) {
      console.error('Verification failed - could not read back saved content');
      return false;
    }
    
    console.log('Verification - saved content length:', savedContent.length);
    
    // Parse to verify integrity
    try {
      const parsedSavedContent = JSON.parse(savedContent);
      if (!Array.isArray(parsedSavedContent)) {
        console.error('Verification failed - saved content is not an array');
        return false;
      }
      
      console.log('Verification - parsedSavedContent length:', parsedSavedContent.length);
      
      if (parsedSavedContent.length !== contentPlan.length) {
        console.error('Verification failed - counts don\'t match', 
          'Original:', contentPlan.length, 
          'Saved:', parsedSavedContent.length);
        return false;
      }
      
      return true;
    } catch (parseError) {
      console.error('Verification failed - could not parse saved content:', parseError);
      return false;
    }
  } catch (e) {
    console.error('Unexpected error in saveContentPlan:', e);
    return false;
  }
};

// Completely rewritten loadContentPlan function for reliability
export const loadContentPlan = () => {
  try {
    const serialized = window.localStorage.getItem('contentCalendarPlan');
    
    if (!serialized) {
      console.log('No content plan found in localStorage');
      return null;
    }
    
    console.log('Loading content plan, serialized length:', serialized.length);
    
    try {
      const parsed = JSON.parse(serialized);
      
      if (!Array.isArray(parsed)) {
        console.error('Error: Loaded data is not an array:', parsed);
        return null;
      }
      
      console.log('Successfully loaded content plan with items:', parsed.length);
      
      if (parsed.length > 0) {
        console.log('First loaded item:', JSON.stringify(parsed[0]));
        if (parsed.length > 1) {
          console.log('Second loaded item:', JSON.stringify(parsed[1]));
        }
      } else {
        console.log('Warning: Loaded an empty content plan array');
      }
      
      return parsed;
    } catch (parseError) {
      console.error('Error parsing content plan from localStorage:', parseError);
      return null;
    }
  } catch (e) {
    console.error('Unexpected error in loadContentPlan:', e);
    return null;
  }
};
